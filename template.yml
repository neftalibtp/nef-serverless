AWSTemplateFormatVersion: 2010-09-09

# Required section in order to include objects defined by AWS SAM within a Cloudformation template;
Transform:
- AWS::Serverless-2016-10-31
  

#######################################################################################################
#                                                                                                     #
# Serverless Application Model (SAM)                                                                  #
#                                                                                                     #
# AWS SAM is a model used to define serverless applications on AWS.                                   #
#                                                                                                     #
# Serverless applications are applications composed of functions triggered by events.                 #
# A typical serverless application consists of one or more AWS Lambda functions                       #
# triggered by events such as object uploads to Amazon S3, Amazon SNS notifications, and API actions. #
# Those functions can stand alone or leverage other resources such as Amazon DynamoDB                 #
# tables or S3 buckets. The most basic serverless application is simply a function.                   #
#                                                                                                     #
# AWS SAM is based on AWS CloudFormation. A serverless application is defined in a                    #
# CloudFormation template and deployed as a CloudFormation stack.                                     #
# An AWS SAM template is a CloudFormation template.                                                   #
#                                                                                                     #
# AWS SAM defines a set of objects which can be included in a CloudFormation template                 #
# to describe common components of serverless applications easily.                                    #
#                                                                                                     #
# src. https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md    #
#                                                                                                     #
#######################################################################################################

Resources:

  # Builds the Gateway to our Proxy Lambda
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Webhook
      StageName: stage
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          /post-hook-url:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations

  # Node.js Function for an API with Lambda Proxy Integration
  ProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: nef-CodeBuild-ProxyLambdaFunction # This is your Lambda function's name; Make sure this is descriptive enough that we know what it's doing;
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: serverless # points to the code/document root
      Events:
        MyEndpoint:
          Type: Api
          Properties:
              Path: /post-hook-url  
              Method: post
              RestApiId:
                Ref: APIGateway

  # https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-lambda-state-machine-cloudformation.html
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: nef-CodeBuild-CreateBox-LambdaFunction-Proto2 # This is your Lambda function's name; Make sure this is descriptive enough that we know what it's doing;
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: serverless # points to the code/document root

  # https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-lambda-state-machine-cloudformation.html
  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: nef-CodeBuild-StepFunction
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "A Hello World AWL example using an AWS Lambda function",
              "StartAt": "nef-CodeBuild-CreateBox-LambdaFunction-Proto2",
              "States": {
                "nef-CodeBuild-CreateBox-LambdaFunction-Proto2": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt [ MyLambdaFunction, Arn ]}
      RoleArn: arn:aws:iam::047802695727:role/service-role/StatesExecutionRole-us-east-2